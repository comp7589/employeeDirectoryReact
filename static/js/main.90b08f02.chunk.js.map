{"version":3,"sources":["components/DataBody.js","utils/DataAreaContext.js","components/DataTable.js","components/SearchBar.js","components/NavBar.js","utils/API.js","components/DataArea.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataBody","users","console","log","undefined","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","DataAreaContext","React","createContext","DataTable","headings","context","handleSort","useContext","id","developerState","width","style","onClick","Searchbar","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","data-toggle","data-target","SearchBar","axios","get","DataArea","useState","order","filteredUsers","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","filteredList","item","values","toLowerCase","indexOf","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","NavBar","length","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90b08f02.chunk.js","sourcesContent":["// import React, { useContext } from \"react\";\r\nimport React from \"react\";\r\n// import DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataBody = ({ users }) => {\r\n    // const context = useContext(DataAreaContext);\r\n    console.log(users);\r\n    function formatDate(date) {\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        const day = dayArray[0];\r\n        const formattedDate = [month, day, year].join(\"-\");\r\n        return formattedDate;\r\n    }\r\n    return (\r\n        <tbody>\r\n            {\r\n                users[0] !== undefined && users[0].name !== undefined ? (\r\n                    users.map(({ login, name, picture, phone, email, dob }) => {\r\n                        return (\r\n                            <tr key={login.uuid}>\r\n                                <td data-th=\"Image\" className=\"align-middle\">\r\n                                    <img\r\n                                        src={picture.medium}\r\n                                        alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                                        className=\"img-responsive\"\r\n                                    />\r\n                                </td>\r\n                                <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                                    {name.first} {name.last}\r\n                                </td>\r\n                                <td data-th=\"Phone\" className=\"align-middle\">\r\n                                    {phone}\r\n                                </td>\r\n                                <td data-th=\"Email\" className=\"align-middle\">\r\n                                    <a href={\"mailto:\" + email} target=\"__blank\">\r\n                                        {email}\r\n                                    </a>\r\n                                </td>\r\n                                <td data-th=\"DOB\" className=\"align-middle\">\r\n                                    {formatDate(dob.date)}\r\n                                </td>\r\n                            </tr>\r\n                        );\r\n                    }\r\n\r\n                    )\r\n\r\n                ) : (\r\n                        <>\r\n                        </>\r\n                    )\r\n            }\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default DataBody;","import React from \"react\";\r\n\r\nconst DataAreaContext = React.createContext({\r\n});\r\n\r\nexport default DataAreaContext;","import React, { useContext } from \"react\";\r\nimport DataBody from \"./DataBody\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataTable = ({headings, users, handleSort}) => {\r\n    const context = useContext(DataAreaContext);\r\n\r\n    return(\r\n        <div className=\"datatable mt-5\">\r\n            <table\r\n            id=\"table\"\r\n            className=\"table table-striped table-hover table-condensed\"\r\n            >\r\n                <thead>\r\n                    <tr>\r\n                        {context.developerState.headings.map(({ name, width }) => {\r\n                            return (\r\n                                <th\r\n                                className=\"col\"\r\n                                key={name}\r\n                                style={{ width }}\r\n                                onClick={() => {\r\n                                    context.handleSort(name);\r\n                                }}\r\n                                >\r\n                                    {name}\r\n                                    <span className=\"pointer\"></span>\r\n                                </th>\r\n                            );\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n\r\n                <DataBody users = {users} />\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataTable;","import React, { useContext } from \"react\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst Searchbar = () => {\r\n    const context = useContext(DataAreaContext);\r\n  \r\n    return (\r\n      <div className=\"searchbar\">\r\n        <div className=\"input-group\">\r\n            <div className=\"input-group-prepend\">\r\n              <span className=\"input-group-text\" id=\"\">\r\n                Search\r\n              </span>\r\n            </div>\r\n            <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"name\"\r\n            aria-label=\"Search\"\r\n            onChange={e => context.handleSearchChange(e)}\r\n          />\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n  export default Searchbar;","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nfunction Nav() {\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n        >\r\n            <span className=\"collapse navbar-collapse row\" id=\"navbarNav\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse row\" id=\"navbarNav\">\r\n            <div className=\"search-area col-4\">\r\n                < SearchBar />\r\n            </div>\r\n        </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n    //Grab all users\r\n    getUsers: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React, { useState, useEffect, Component } from \"react\";\r\nimport DataTable from \"./DataTable\";\r\nimport NavBar from \"../components/NavBar\";\r\nimport API from \"../utils/API\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataArea = () => {\r\n  const [developerState, setDeveloperState] = useState({\r\n    users: [],\r\n    order: \"descend\",\r\n    filteredUsers: [],\r\n    headings: [\r\n      { name: \"Image\", width: \"10%\", order: \"descend\" },\r\n      { name: \"name\", width: \"10%\", order: \"descend\" },\r\n      { name: \"phone\", width: \"20%\", order: \"descend\" },\r\n      { name: \"email\", width: \"20%\", order: \"descend\" },\r\n      { name: \"dob\", width: \"10%\", order: \"descend\" }\r\n    ]\r\n  });\r\n\r\n  const handleSort = heading => {\r\n    let currentOrder = developerState.headings\r\n      .filter(elem => elem.name === heading)\r\n      .map(elem => elem.order)\r\n      .toString();\r\n\r\n    if (currentOrder === \"descend\") {\r\n      currentOrder = \"ascend\";\r\n    } else {\r\n      currentOrder = \"descend\";\r\n    }\r\n\r\n    const compareFnc = (a, b) => {\r\n      if (currentOrder === \"ascend\") {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        // numerically\r\n        else if (heading === \"name\") {\r\n          return a[heading].first.localeCompare(b[heading].first);\r\n        } else if (heading === \"dob\") {\r\n          return a[heading].age - b[heading].age;\r\n        } else {\r\n          return a[heading].localeCompare(b[heading]);\r\n        }\r\n      } else {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        // numerically\r\n        else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        }else if (heading === \"dob\") {\r\n          return b[heading].age - a[heading].age;\r\n        }  else {\r\n          return b[heading].localeCompare(a[heading]);\r\n        }\r\n      }\r\n    };\r\n    const sortedUsers = developerState.filteredUsers.sort(compareFnc);\r\n    const updatedHeadings = developerState.headings.map(elem => {\r\n      elem.order = elem.name === heading ? currentOrder : elem.order;\r\n      return elem;\r\n    });\r\n\r\n    setDeveloperState({\r\n      ...developerState,\r\n      filteredUsers: sortedUsers,\r\n      headings: updatedHeadings\r\n    });\r\n  };\r\n\r\n  const handleSearchChange = event => {\r\n    const filter = event.target.value;\r\n    const filteredList = developerState.users.filter( item => {\r\n      let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\r\n      console.log(filter, values)\r\n    if(values.indexOf(filter.toLowerCase()) !== -1){\r\n      return item\r\n    };\r\n    });\r\n\r\n    setDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n  };\r\n\r\n  useEffect(() => {\r\n    API.getUsers().then(results => {\r\n      console.log(results.data.results);\r\n      setDeveloperState({\r\n        ...developerState,\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <DataAreaContext.Provider\r\n      value={{ developerState, handleSearchChange, handleSort }}\r\n    >\r\n      <NavBar />\r\n      <div className=\"data-area\">\r\n        {developerState.filteredUsers.length > 0 ? <DataTable users = {developerState.users}  /> : <div></div>}\r\n      </div>\r\n    </DataAreaContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DataArea;\r\n\r\n// copy from rob\r\n\r\n// export default class DataArea extends Component {\r\n//   state = {\r\n//     users: [{}],\r\n//     order: \"descend\",\r\n//     filteredUsers: [{}]\r\n//   }\r\n//   headings = [\r\n//     { name: \"Image\", width: \"10%\" },\r\n//     { name: \"Name\", width: \"10%\" },\r\n//     { name: \"Phone\", width: \"20%\" },\r\n//     { name: \"Email\", width: \"20%\" },\r\n//     { name: \"DOB\", width: \"10%\" }\r\n//   ]\r\n//   handleSort = heading => {\r\n//     if (this.state.order === \"descend\") {\r\n//       this.setState({\r\n//         order: \"ascend\"\r\n//       })\r\n//     } else {\r\n//       this.setState({\r\n//         order: \"descend\"\r\n//       })\r\n//     }\r\n//     const compareFnc = (a, b) => {\r\n//       if (this.state.order === \"ascend\") {\r\n//         // account for missing values\r\n//         if (a[heading] === undefined) {\r\n//           return 1;\r\n//         } else if (b[heading] === undefined) {\r\n//           return -1;\r\n//         }\r\n//         // numerically\r\n//         else if (heading === \"name\") {\r\n//           return a[heading].first.localeCompare(b[heading].first);\r\n//         } else {\r\n//           return a[heading] - b[heading];\r\n//         }\r\n//       } else {\r\n//         // account for missing values\r\n//         if (a[heading] === undefined) {\r\n//           return 1;\r\n//         } else if (b[heading] === undefined) {\r\n//           return -1;\r\n//         }\r\n//         // numerically\r\n//         else if (heading === \"name\") {\r\n//           return b[heading].first.localeCompare(a[heading].first);\r\n//         } else {\r\n//           return b[heading] - a[heading];\r\n//         }\r\n//       }\r\n//     }\r\n//     const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n//     this.setState({ filteredUsers: sortedUsers });\r\n//   }\r\n//   handleSearchChange = event => {\r\n//     console.log(event.target.value);\r\n//     const filter = event.target.value;\r\n//     const filteredList = this.state.users.filter(item => {\r\n//       // merge data together, then see if user input is anywhere inside\r\n//       let values = Object.values(item)\r\n//         .join(\"\")\r\n//         .toLowerCase();\r\n//       return values.indexOf(filter.toLowerCase()) !== -1;\r\n//     });\r\n//     this.setState({ filteredUsers: filteredList });\r\n//   }\r\n//   componentDidMount() {\r\n//     API.getUsers().then(results => {\r\n//       this.setState({\r\n//         users: results.data.results,\r\n//         filteredUsers: results.data.results\r\n//       });\r\n//     });\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         <NavBar handleSearchChange={this.handleSearchChange} />\r\n//         <div className=\"data-area\">\r\n//           <DataTable\r\n//             headings={this.headings}\r\n//             users={this.state.filteredUsers}\r\n//             handleSort={this.handleSort}\r\n//           />\r\n//         </div>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// OLD MODEL\r\n\r\n// export default class DataArea extends Component {\r\n//   state = {\r\n//     users: [{}],\r\n//     order: \"descend\",\r\n//     filteredUsers: [{}],\r\n//   }\r\n//   headings = [\r\n//     { name: \"Image\", width: \"10%\", order: \"descend\" },\r\n//     { name: \"name\", width: \"10%\", order: \"descend\" },\r\n//     { name: \"phone\", width: \"20%\", order: \"descend\" },\r\n//     { name: \"email\", width: \"20%\", order: \"descend\" },\r\n//     { name: \"dob\", width: \"10%\", order: \"descend\" }\r\n//   ]\r\n\r\n\r\n//   handleSort = heading => {\r\n//     // let currentOrder = developerState.headings\r\n//     //   .filter(elem => elem.name === heading)\r\n//     //   .map(elem => elem.order)\r\n//     //   .toString();\r\n\r\n//     if (this.state.order === \"descend\") {\r\n//       this.setState = ({ order: \"ascend \" });\r\n//     } else {\r\n//       this.setState = ({ order: \"descend \" });\r\n//     }\r\n\r\n//     const compareFnc = (a, b) => {\r\n//       if (this.state.order === \"ascend\") {\r\n//         // account for missing values\r\n//         if (a[heading] === undefined) {\r\n//           return 1;\r\n//         } else if (b[heading] === undefined) {\r\n//           return -1;\r\n//         }\r\n//         // numerically\r\n//         else if (heading === \"name\") {\r\n//           return a[heading].first.localeCompare(b[heading].first);\r\n//         } else if (heading === \"dob\") {\r\n//           return a[heading].age - b[heading].age;\r\n//         } else {\r\n//           return a[heading].localeCompare(b[heading]);\r\n//         }\r\n//       } else {\r\n//         // account for missing values\r\n//         if (a[heading] === undefined) {\r\n//           return 1;\r\n//         } else if (b[heading] === undefined) {\r\n//           return -1;\r\n//         }\r\n//         // numerically\r\n//         else if (heading === \"name\") {\r\n//           return b[heading].first.localeCompare(a[heading].first);\r\n//         } else if (heading === \"dob\") {\r\n//           return b[heading].age - a[heading].age;\r\n//         } else {\r\n//           return b[heading].localeCompare(a[heading]);\r\n//         }\r\n//       }\r\n//     };\r\n//     const sortedUsers = this.state.filteredUsers.sort(compareFnc);\r\n\r\n//     this.setState({ filteredUsers: sortedUsers });\r\n//   }\r\n//     // const updatedHeadings = developerState.headings.map(elem => {\r\n//     //   elem.order = elem.name === heading ? currentOrder : elem.order;\r\n//     //   return elem;\r\n//     // });\r\n\r\n//     //   setDeveloperState({\r\n//     //     ...developerState,\r\n//     //     filteredUsers: sortedUsers,\r\n//     //     headings: updatedHeadings\r\n//     //   });\r\n//     // };\r\n\r\n//     handleSearchChange = event => {\r\n//       const filter = event.target.value;\r\n//       const filteredList = developerState.users.filter(item => {\r\n//         let values = Object.values(item).join(\"\").toLowerCase();\r\n//         // item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\r\n//         console.log(filter, values)\r\n//         return values.indexOf(filter.toLowerCase() !== -1)\r\n\r\n//       });\r\n//       this.setState({ filteredUsers: filteredList });\r\n//       // setDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n//     };\r\n\r\n//     // useEffect(() => {\r\n//     //   API.getUsers().then(results => {\r\n//     //     console.log(results.data.results);\r\n//     //     setDeveloperState({\r\n//     //       ...developerState,\r\n//     //       users: results.data.results,\r\n//     //       filteredUsers: results.data.results\r\n//     //     });\r\n//     //   });\r\n//     // }, []);\r\n//     componentDidMount(\r\n//       API.getUsers().then(results => {\r\n//         this.setState({\r\n//           users: results.data.results,\r\n//           filteredUsers: results.data.results\r\n//         })\r\n//       })\r\n//     );\r\n  \r\n//     render() {\r\n//       return (\r\n//         <>\r\n//           <Nav handleSearchChange={this.handleSearchChange} />\r\n//           <div className=\"data-area\">\r\n//             <DataTable\r\n//               headings={this.headings}\r\n//               users={this.state.filteredUsers}\r\n//               handleSort={this.handleSort}\r\n//             />\r\n//           </div>\r\n//         </>\r\n//       );\r\n//     }","import React from \"react\";\r\nimport DataArea from \"../components/DataArea\";\r\n\r\n//main < dataarea < datatable, navbar(searchbar here), api(from util) < databody(export to datatable)  \r\n//header, wrapper, footer(optional), searchbar\r\n\r\n\r\nfunction Main() {\r\n    return(\r\n        <DataArea />\r\n    );\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\n\r\nfunction Wrapper({ children }) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\r\n\r\nfunction Header() {\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\nimport Main from \"./components/Main\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Header/>\n        <Main/>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}